// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.3.3
// LVGL version: 8.3.6
// Project name: SquareLine_Project

#include "ui.h"
#include "../network.h"

extern Network network;

static lv_timer_t *timer;
static lv_obj_t *list_ctrl = NULL;

void list_event_handler(lv_event_t *e)
{
  lv_event_code_t code = lv_event_get_code(e);
  lv_obj_t *obj = lv_event_get_target(e);

  if (code == LV_EVENT_CLICKED)
  {
    String selectedItem = String(lv_list_get_btn_text(list_ctrl, obj));
    for (int i = 0; i < selectedItem.length() - 1; i++)
    {
      if (selectedItem.substring(i, i + 2) == " (")
      {
        // Serial.println("Clicked:" + selectedItem.substring(0, i));

        // Set button selected
        lv_obj_add_state(obj, LV_STATE_PRESSED);

        //Enable the OK button by clearing the state
        lv_obj_clear_state( ui_chooseConnectionOKBtn, LV_STATE_DISABLED );
        network.setSSID(selectedItem.substring(0, i));
        break;
      }
    }
  }
  else if (code == LV_EVENT_PRESSED)
  {
    for(int i = 0; i < lv_obj_get_child_cnt(list_ctrl); i++)
    {
      lv_obj_t * child = lv_obj_get_child(list_ctrl, i);
      if(child == obj)
        lv_obj_add_state(child, LV_STATE_PRESSED);
      else
        lv_obj_clear_state(child, LV_STATE_PRESSED);
    }
  }
}

void showingFoundWiFiList()
{
  Serial.println("showingFoundWiFiList(): ENTER");
  Serial.print("network.foundWifiList=");
  Serial.println(network.foundWifiList.size());

  if (network.foundWifiList.size() == 0)
    return;

  if (list_ctrl != NULL)
    lv_obj_clean(list_ctrl);

  int loop = 0;
  for (std::vector<String>::iterator item = network.foundWifiList.begin(); item != network.foundWifiList.end(); ++item)
  {
    Serial.println((*item).c_str());
    auto list_btn = lv_list_add_btn(list_ctrl, LV_SYMBOL_FILE, (*item).c_str());
    lv_obj_add_event_cb(list_btn, list_event_handler, LV_EVENT_CLICKED, NULL);
    lv_obj_add_event_cb(list_btn, list_event_handler, LV_EVENT_PRESSED, NULL);
    delay(1);

    loop++;
  }

  // foundNetworks = network.foundWifiList.size();
  Serial.println("showingFoundWiFiList(): EXIT");
}

void timerForNetwork(lv_timer_t *timer)
{
  LV_UNUSED(timer);

  switch (network.networkStatus)
  {
    case NETWORK_SEARCHING:
      Serial.println("Network::timerForNetwork:NETWORK_SEARCHING");
      break;

    case NETWORK_SEARCHING_DONE:
      Serial.println("Network::timerForNetwork:NETWORK_SEARCHING_DONE");
      showingFoundWiFiList();
      network.stopNetworkScanner();
      lv_timer_del(timer);
      break;

    // case NETWORK_CONNECTED_POPUP:
    //   popupMsgBox("WiFi Connected!", "Now you'll get the current time soon.");
    //   networkStatus = NETWORK_CONNECTED;
    //   configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
    //   break;

    // case NETWORK_CONNECTED:

    //   showingFoundWiFiList();
    //   updateLocalTime();
    //   break;

    // case NETWORK_CONNECT_FAILED:
    //   networkStatus = NETWORK_SEARCHING;
    //   popupMsgBox("Oops!", "Please check your wifi password and try again.");
    //   break;

    default:
      break;
  }
}

void passphraseOkCallback(lv_event_t * e)
{
	// Your code here
}

void InitializeChooseConnectionPage(lv_event_t * e)
{
  list_ctrl = lv_list_create(ui_ssidPanel);
  lv_obj_align(list_ctrl, LV_ALIGN_CENTER, 0, 0);
  lv_obj_set_size(list_ctrl, lv_pct(100), lv_pct(100));
  lv_list_add_text(list_ctrl, "WiFi: Looking for Networks...");

  network.startNetworkScanner();
  timer = lv_timer_create(timerForNetwork, 1000, list_ctrl);
}

void InitializePassphrasePage(lv_event_t * e)
{
	// Your code here
}
